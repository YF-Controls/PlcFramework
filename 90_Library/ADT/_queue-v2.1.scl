FUNCTION "_queue" : Int
TITLE = Function:Queue
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : cyanezf
FAMILY : AbstractDataType
NAME : _queue
VERSION : 2.1

   VAR_INPUT 
      command : Int;   // 1=Init; 10=Enqueue(Add); 11=Dequeue(Remove); 12=Peek
   END_VAR

   VAR_IN_OUT 
      instance : "queueInstanceAttributes";   // Queue instance
      data : Variant;   // Data array of type <E>
      buffer : Variant;   // Buffer data of type <E>
   END_VAR

   VAR_TEMP 
      retVal : Int;
      length : DInt;
   END_VAR

   VAR CONSTANT 
      CMD_01_INIT : Int := 1;   // Command 01: Initialize
      CMD_10_ENQUEUE : Int := 10;   // Command 10: Add dato to last position
      CMD_11_DEQUEUE : Int := 11;   // Command 11: Remove data from first position
      CMD_12_PEEK : Int := 12;   // Command 12: Peek data from first position
      STATUS_0000_DONE : Int := 16#0000;   // Status: Done
      STATUS_8002_DATA_IS_NOT_ARRAY : Int := 16#8002;   // Status: Error - Data array is not array
      STATUS_8003_DATA_IS_NOT_VALID_ARRAY : Int := 16#8003;   // Status: Error - Data array is not valid array
      STATUS_8005_DATA_ARRAY_LESS_THAN_TWO : Int := 16#8005;   // Status: Error - Data array is less than two elements
      STATUS_8010_IS_EMPTY : Int := 16#8010;   // Status: Error - ADT is empty
      STATUS_8011_IS_FULL : Int := 16#8011;   // Status: Error - ADT is full
      STATUS_8020_ERROR_MOVE_BUFFER_TO_DATA : Int := 16#8020;   // Status: Error - Movement from buffer to data
      STATUS_8021_ERROR_MOVE_DATA_TO_BUFFER : Int := 16#8021;   // Status: Error - Movement from data to buffer
      STATUS_8FFF_UNKNOWN_COMMAND : Int := 16#8FFF;   // Status: Error - Unknown command
   END_VAR

BEGIN
(*--
# Log
| version | date | author | description |
|:-------:|:----:|:------:|:------------|
| v2.1 | 2024-12-17 | cyanezf | Full refactor and bugs fixed |

# Dependencies
| Dependency |
|:-----------|
| queueInstanceAttributes |
	
# Description
This function is used to queue/dequeue data

## Commands
In any call if queue is not initialized, the function tries to do it.
| Command | Description |
|:-------:|:------------|
| 1 | Initialize queue attributes, that means, function clears queue. |
| 10 | Add dato to last position |
| 11 | Remove data from first position |
| 12 | Peek data from first position |
| Unknown | Init. is tried and returns an error code. |

## RLO and Return
| RLO | Return | Description |
|:---:|:------:|:------------|
| TRUE | 0 | Done |
| FALSE | 0x8002 | Error - Data array is not array |
| FALSE | 0x8003 | Error - Data array is not valid array |
| FALSE | 0x8005 | Error - Data array is less than two elements |
| FALSE | 0x8010 | Error - ADT is empty |
| FALSE | 0x8011 | Error - ADT is full |
| FALSE | 0x8020 | Error - Movement from buffer to data |
| FALSE | 0x8021 | Error - Movement from data to buffer |
| FALSE | 0x8FFF | Error - Unknown command |

#
_Use [Markdown Live Preview](https://markdownlivepreview.com/) to watch this doc._
--*)
	
	REGION Command 01: Initialize
	  // 1. Initialize
	  IF NOT #instance.isInitialized OR #command = #CMD_01_INIT THEN
	    
	    // 1.1. Initialize class attributes
	    #instance.front := 0;
	    #instance.rear := 0;
	    #instance.length := 0;
	    #instance.MAX := 0;
	    #instance.isEmpty := 1;
	    #instance.isFull := 0;
	    
	    // 1.2. Return if data is not array
	    IF NOT IS_ARRAY(#data) THEN
	      #_queue := #STATUS_8002_DATA_IS_NOT_ARRAY;
	      ENO := FALSE;
	      RETURN;
	    END_IF;
	    
	    // 1.3. Get array length
	    #length := UDINT_TO_DINT(CountOfElements(#data));
	    
	    // 1.4. Return if array is less than two elements
	    IF #length < 2 THEN
	      #_queue := #STATUS_8005_DATA_ARRAY_LESS_THAN_TWO;
	      ENO := FALSE;
	      RETURN;
	    END_IF;
	    
	    // 1.5. Check array limits
	    #retVal := MOVE_BLK_VARIANT(SRC := #data,
	                                COUNT := 1,
	                                SRC_INDEX := 0,
	                                DEST_INDEX := #length - 1,
	                                DEST => #data);
	    // 1.6. Return is array is not ok
	    IF #retVal <> 0 THEN
	      #_queue := #STATUS_8003_DATA_IS_NOT_VALID_ARRAY;
	      ENO := FALSE;
	      RETURN;
	    END_IF;
	    
	    // 1.7. Set initialized
	    #instance.isInitialized := TRUE;
	    #instance.MAX := #length;
	    
	    // 1.8. Return done if command was called
	    IF #command = #CMD_01_INIT THEN
	      #_queue := #STATUS_0000_DONE;
	      ENO := TRUE;
	      RETURN;
	    END_IF;
	  END_IF;
	END_REGION
	
	CASE #command OF
	  #CMD_10_ENQUEUE:
	    // ##################################################
	    REGION Command 10: Add to queue
	      
	      // 1. Return is queue is full
	      IF #instance.isFull THEN
	        #_queue := #STATUS_8011_IS_FULL;
	        ENO := FALSE;
	        RETURN;
	      END_IF;
	      
	      // 2. Move from buffer to data
	      #retVal := MOVE_BLK_VARIANT(SRC := #buffer,
	                                  COUNT := 1,
	                                  SRC_INDEX := 0,
	                                  DEST_INDEX := #instance.rear,
	                                  DEST => #data);
	      
	      // 3. Return if data movement error
	      IF #retVal <> 0 THEN
	        #_queue := #STATUS_8020_ERROR_MOVE_BUFFER_TO_DATA;
	        ENO := FALSE;
	        RETURN;
	      END_IF;
	      
	      // 4. Update class attributes
	      IF #instance.rear < #instance.MAX - 1 THEN
	        #instance.rear += 1;
	      ELSE
	        #instance.rear := 0;
	      END_IF;
	      
	      IF #instance.length < #instance.MAX THEN
	        #instance.length += 1;
	      END_IF;
	      
	      #instance.isEmpty := #instance.length <= 0;
	      #instance.isFull := #instance.length >= #instance.MAX;
	      
	      // 5. Return true
	      #_queue := #STATUS_0000_DONE;
	      ENO := true;
	      RETURN;
	    END_REGION ;
	    
	  #CMD_11_DEQUEUE:
	    // ##################################################
	    REGION Command 11: Remove from queue
	      
	      // 1. Return is queue is empty
	      IF #instance.isEmpty THEN
	        #_queue := #STATUS_8010_IS_EMPTY;
	        ENO := FALSE;
	        RETURN;
	      END_IF;
	      
	      // 2. Move from data to buffer
	      #retVal := MOVE_BLK_VARIANT(SRC := #data,
	                                  COUNT := 1,
	                                  SRC_INDEX := #instance.front,
	                                  DEST_INDEX := 0,
	                                  DEST => #buffer);
	      
	      // 3. Return if data movement error
	      IF #retVal <> 0 THEN
	        #_queue := #STATUS_8021_ERROR_MOVE_DATA_TO_BUFFER;
	        ENO := FALSE;
	        RETURN;
	      END_IF;
	      
	      // 4. Update class attributes
	      IF #instance.front < #instance.MAX - 1 THEN
	        #instance.front += 1;
	      ELSE
	        #instance.front := 0;
	      END_IF;
	      
	      IF #instance.length > 0 THEN
	        #instance.length -= 1;
	      END_IF;
	      
	      #instance.isEmpty := #instance.length <= 0;
	      #instance.isFull := #instance.length >= #instance.MAX;
	      
	      // 5. Return true
	      #_queue := #STATUS_0000_DONE;
	      ENO := true;
	      RETURN;
	    END_REGION ;
	    
	  #CMD_12_PEEK:
	    // ##################################################
	    REGION Command 12: Peek first position
	      
	      // 1. Return is queue is empty
	      IF #instance.isEmpty THEN
	        #_queue := #STATUS_8010_IS_EMPTY;
	        ENO := FALSE;
	        RETURN;
	      END_IF;
	      
	      // 2. Move from data to buffer
	      #retVal := MOVE_BLK_VARIANT(SRC := #data,
	                                  COUNT := 1,
	                                  SRC_INDEX := #instance.front,
	                                  DEST_INDEX := 0,
	                                  DEST => #buffer);
	      
	      // 3. Return if data movement error
	      IF #retVal <> 0 THEN
	        #_queue := #STATUS_8021_ERROR_MOVE_DATA_TO_BUFFER;
	        ENO := FALSE;
	        RETURN;
	      END_IF;
	      
	      // 4. Return true
	      #_queue := #STATUS_0000_DONE;
	      ENO := true;
	      RETURN;
	    END_REGION ;
	    
	END_CASE;
	
	// Return
	#_queue := #STATUS_8FFF_UNKNOWN_COMMAND;
	ENO := FALSE;
	
END_FUNCTION

