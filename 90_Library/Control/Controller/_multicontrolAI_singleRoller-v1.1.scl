FUNCTION_BLOCK "_multicontrolAI_singleRoller"
TITLE = Function:Multicontrol AI for single motoroller
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : cyanezf
FAMILY : 'Control/Controller'
NAME : _multicontrolAI_singleRoller
VERSION : 1.1

   VAR_INPUT 
      controlOn { ExternalWritable := 'False'} : Bool;   // IR: 1=Control on
      emrgStopOk { ExternalWritable := 'False'} : Bool;   // IR: 1=Emergency ok
      runForward { ExternalWritable := 'False'} : Bool;   // IR: 1=Run forward
      runBackward { ExternalWritable := 'False'} : Bool;   // IR: 1=Run backward
      AI_speed { ExternalWritable := 'False'} : SInt;   // IR: Current speed +-%
      SP_speed { ExternalWritable := 'False'} : Real;   // IR: Setpoint speed +-%
      MAX_SPEED { ExternalWritable := 'False'} : Real;   // IR: Max real speed
   END_VAR

   VAR_OUTPUT 
      isRunning { ExternalWritable := 'False'} : Bool;   // OR: 1=Is running
      direction { ExternalWritable := 'False'} : Bool;   // OR: 0=Forward; 1=Backward
      speed { ExternalWritable := 'False'} : Real;   // OR: Current speed
      AO_speed { ExternalWritable := 'False'} : SInt;   // OR: Output speed to roller
   END_VAR

   VAR_TEMP 
      ok : Bool;
      tmpSpeed : SInt;
   END_VAR

   VAR CONSTANT 
      MAX_SPEED_PER : SInt := 100;
      NO_SPEED_PER : SInt := 0;
   END_VAR

BEGIN
(*--
# Log
| version | date | author | description |
|:-------:|:----:|:------:|:------------|
| v1.1 | 2024-05-09 | cyanezf | Refactor to scl |
| v1.0 | 2023-06-06 | cyanezf | First version |

# Dependencies
| Dependency |
|:-----------|

# Description
This function controls Interroll Multicontrol AI for single roller.

#
_Use [Markdown Live Preview](https://markdownlivepreview.com/) to watch this doc._
--*)

	// Speed to %
	// MAX_SPEED -> 100%
	// #SP_speed  -> ?
	// ? = #SP_speed * 100% / MAX_SPEED
	#tmpSpeed := REAL_TO_SINT(#SP_speed * #MAX_SPEED_PER / #MAX_SPEED);
	
	// Ok
	#ok := #controlOn AND #emrgStopOk AND #tmpSpeed <> #NO_SPEED_PER;
	
	// Output speed
	IF #runForward AND NOT #runBackward AND #ok THEN
	  
	  IF #tmpSpeed > #MAX_SPEED_PER THEN
	    #AO_speed := #MAX_SPEED_PER;
	  ELSE
	    #AO_speed := #tmpSpeed;
	  END_IF;
	  
	ELSIF #runBackward AND NOT #runForward AND #ok THEN
	  
	  IF #tmpSpeed > #MAX_SPEED_PER THEN
	    #AO_speed := - #MAX_SPEED_PER;
	  ELSE
	    #AO_speed := - #tmpSpeed;
	  END_IF;
	  
	ELSE
	  
	  #AO_speed := #NO_SPEED_PER;
	  
	END_IF;
	
	// Is running and direction
	#isRunning := #AI_speed <> #NO_SPEED_PER;
	#direction := #AI_speed < #NO_SPEED_PER;
	
	// % to speed
	// 100%     -> MAX_PSEED
	// #AI_speed -> ?
	// ? = #AI_speed * MAX_SPEED / 100%
	#speed := #AI_speed * #MAX_SPEED / #MAX_SPEED_PER;
	
	// Save RLO
	ENO := true;
	
END_FUNCTION_BLOCK

