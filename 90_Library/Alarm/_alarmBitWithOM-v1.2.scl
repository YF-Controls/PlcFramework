FUNCTION "_alarmBitWithOM" : Void
TITLE = Function:Update alarm bit with operating mode
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : cyanezf
FAMILY : Alarm
NAME : _alarmBitWithOM
VERSION : 1.2

   VAR_INPUT 
      incoming : Bool;   // 1=Alarm triggered
      outcoming : Bool;   // 1=No alarm
      acknNeeded : Bool;   // 0=Auto ackn. 1=Use ackn.
      ackn : Bool;   // 1=Ackn
   END_VAR

   VAR_IN_OUT 
      u_thisAlarm : Bool;   // 1=Alarm triggered bit
      s_localAlarm : Bool;   // Set local alarm
      r_maint : Bool;   // Reset maintenance ready
      r_manual : Bool;   // Reset manual ready
      r_semi : Bool;   // Reset semi ready
      r_auto : Bool;   // Reset auto ready
   END_VAR

BEGIN
(*--

# Log
| version | date | author | description |
|:-------:|:----:|:------:|:------------|
| v1.2 | 2025-02-15 | cyanezf | `u_mapAlarm` was removed |
| v1.1 | 2025-01-27 | cyanezf | `s_localAlarm` was added |
| v1.0 | 2023-10-27 | cyanezf | First version |

# Dependencies
| Dependency |
|:-----------|

# Description
alarm is true WHILE `incoming` event is true.
alarm is false when `incoming` event is false, `outcoming` event is true AND `ackn` is true.
ackn. can be external BY `ackn` variable OR automatic when `acknNeeded` variable is false.

#
_Use [Markdown Live Preview](https://markdownlivepreview.com/) to watch this doc._
--*)
	
	// Set/Reset alarm
	IF #incoming THEN
	  #u_thisAlarm := true;
	  
	ELSIF #outcoming AND (NOT #acknNeeded OR #ackn) THEN
	    #u_thisAlarm := false;
	END_IF;
	
	// Set/Reset Flags
	IF #u_thisAlarm THEN
	  
	  #s_localAlarm :=  1;
	  #r_maint := 
	  #r_manual := 
	  #r_semi := 
	  #r_auto := 0;
	
	END_IF;
	
	// Save RLO
	ENO := NOT #u_thisAlarm;
	
END_FUNCTION

