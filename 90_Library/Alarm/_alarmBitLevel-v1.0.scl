FUNCTION "_alarmBitLevel" : USInt
TITLE = Function:Update alarm level
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : cyanezf
FAMILY : Alarm
NAME : _alarmBitLevel
VERSION : 1.0

   VAR_INPUT 
      a1i : Bool;   // 1=Information alarm
      a2w : Bool;   // 2=Warning alarm
      a3e : Bool;   // 3=Error alarm
      a4f : Bool;   // 4=Emergency alarm
   END_VAR

   VAR CONSTANT 
      ALARM_0_NIL : USInt := 0;
      ALARM_1_INFO : USInt := 1;
      ALARM_2_WARNING : USInt := 2;
      ALARM_3_ERROR : USInt := 3;
      ALARM_4_EMERGENCY : USInt := 4;
   END_VAR

BEGIN
(*--

# Log
| version | date | author | description |
|:-------:|:----:|:------:|:------------|
| v1.0 | 2025-01-27 | cyanezf | First version |

# Dependencies
| Dependency |
|:-----------|

# Description
This function codes as USINT the single bits for each alarm level.

## Alarm levels
| Level | Alarm |
|:-----:|:------|
| 0 | No alarm |
| 1 | Information |
| 2	| Warning |
| 3	| Error |
| 4 | Emergency |

#
_Use [Markdown Live Preview](https://markdownlivepreview.com/) to watch this doc._
--*)


	(*--{
		"Log": [
			{"version":"v1.0", "date" : "2025-01-27", "author": "cyanezf, "description": "First version"},
		],
		"dependencies" : [],
		"description" : "

How it works:
This function code as USINT the single bits for each alarm level

	 "
	}--*)

	// Get alarm level by priority
	IF #a4f THEN
	  #_alarmBitLevel := #ALARM_4_EMERGENCY;
	  
	ELSIF #a3e THEN
	  #_alarmBitLevel := #ALARM_3_ERROR;
	  
	ELSIF #a2w THEN
	  #_alarmBitLevel := #ALARM_2_WARNING;
	  
	ELSIF #a1i THEN
	  #_alarmBitLevel := #ALARM_1_INFO;
	  
	ELSE
	  #_alarmBitLevel := #ALARM_0_NIL;
	  
	END_IF;
	
	// Save RLO
	ENO := true;
	
END_FUNCTION

