FUNCTION "_UF_fdiStatus" : Int
TITLE = Function:FDI status
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : cyanezf
FAMILY : Safety
NAME : _UF_fdiStatus
VERSION : 2.0

   VAR_INPUT 
      enable : Bool;   // 1=Enabled
      e_stop : Bool;   // 1= Emergency stop input is true
      bypass : Bool;   // 1=Bypass enabled
      passivation : Bool;   // 1= QBAD from F-DB module of this input is triggered (Passivated)
      q : Bool;   // 1=ESTOP1 Q output is true
   END_VAR

   VAR CONSTANT 
      F_STATUS_0000_DISABLED : Int := 0;   // F-Status: 0x0000 - Disabled
      F_STATUS_0001_READY : Int := 1;   // F-Status: 0x0001 - Ready
      F_STATUS_7000_BYPASSED : Int := 16#7000;   // F-Status: 0x7000 - Warning - F-object bypassed
      F_STATUS_8000_ESTOP_UNACKN : Int := 16#8000;   // F-Status: 0x8000 - Error - Emergency stop unacknowledged
      F_STATUS_8001_PASSIVATION : Int := 16#8001;   // F-Status: 0x8001 - Error - F-object passition
      F_STATUS_F000_ESTOP_TRIGGERED : Int := 16#F000;   // F-Status: 0xF000 - Emergency - Emergency stop triggered
   END_VAR


BEGIN
(*--

# Log
| version | date | author | description |
|:-------:|:----:|:------:|:------------|
| v2.0 | 2024-08-10 | cyanezf | `enable` added |
| v1.0 | 2023-10-17 | cyanezf | First version |

# Dependencies
| Dependency |
|:-----------|

# Description
This function returns a processed value for a physical OR virtual FDI.

## RLO and return
| RLO | value | description |
|:---:|:-----:|:------------|
| TRUE | 0 | Disabled |
| TRUE | 1 | Ready/ok |
| TRUE | 0x7000 | Emergency stop bypassed |
| TRUE | 0x8000 | Emergency stop unacnkowledged |
| TRUE | 0x8001 | Channel Passivation |
| TRUE | 0xF000 | Emergency stop triggered |

#
_Use [Markdown Live Preview](https://markdownlivepreview.com/) to watch this doc._
--*)
	
	// Check conditions
	IF NOT #enable THEN
	  #_UF_fdiStatus := #F_STATUS_0000_DISABLED;
	  
	ELSIF #passivation THEN
	  #_UF_fdiStatus := #F_STATUS_8001_PASSIVATION;
	  
	ELSIF NOT #q AND NOT #e_stop THEN
	  #_UF_fdiStatus := #F_STATUS_F000_ESTOP_TRIGGERED;
	  
	ELSIF NOT #q AND #e_stop THEN
	  #_UF_fdiStatus := #F_STATUS_8000_ESTOP_UNACKN;
	  
	ELSIF #bypass THEN
	  #_UF_fdiStatus := #F_STATUS_7000_BYPASSED;
	  
	ELSE
	  #_UF_fdiStatus := #F_STATUS_0001_READY;
	  
	END_IF;
	
	// Save RLO
	ENO := true;
	
END_FUNCTION

