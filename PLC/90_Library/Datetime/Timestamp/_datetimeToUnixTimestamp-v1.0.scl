FUNCTION "_datetimeToUnixTimestamp" : Int
TITLE = Function:convert datetime to unix timestamp
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : cyanezf
FAMILY : 'Datetime/Timestamp'
NAME : _datetimeToUnixTimestamp
VERSION : 1.0
   VAR_INPUT 
      in {InstructionName := 'DTL'; LibVersion := '1.0'} : DTL;   // Input datetime
   END_VAR

   VAR_OUTPUT 
      out : "unixTimestamp";   // Output unix timestamp
   END_VAR

   VAR_TEMP 
      status : Int;
      days : ULInt;
      seconds : ULInt;
      i : DInt;
   END_VAR

   VAR CONSTANT 
      STATUS_0000_DONE : Int := 0;
      BASE_YEAR : UInt := 1970;
      BASE_MONTH : USInt := 1;
      BASE_DAY : USInt := 1;
      DAYS_SECONDS : ULInt := 86400;   // 24 hours * 60 minutes * 60 seconds
      HOUR_SECONDS : ULInt := 3600;   // 60 minutes * 60 seconds
      MINUTE_SECONDS : ULInt := 60;   // 60 seconds
   END_VAR


BEGIN
	(*--
	
	# Log
	| version | date | author | description |
	|:-------:|:----:|:------:|:------------|
	| v1.0 | 2025-06-17 | cyanezf | First version |
	
	# Dependencies
	| Dependency |
	|:-----------|
	| _checkDatetime |
	| _getMonthDays |
	| _isLeayYear |
	| unixTimestamp |
	
	# Description
	This function converts a datetime to unix timestamp.
	
	## Return
	| RLO | int | constant | description |
	|:---:|:---:|:---------|:------------|
	| TRUE | 0x0000 | STATUS_0000_OK | Datetime is ok |
	| FALSE | 0x8000 | STATUS_8000_DATETIME_UNDERFLOW | `in` < DTL#1970-01-01-00:00:00.0 |
	| FALSE | 0x8001 | STATUS_8001_DATETIME_OVERFLOW |  `in` > DTL#2262-04-11-23:47:16.854775807 |
	| FALSE | 0x8002 | STATUS_8002_MONTH_OUT_OF_RANGE | `in.month` < 1 or > 12 |
	| FALSE | 0x8003 | STATUS_8003_DAY_OUT_OF_RANGE | `in.day` < 1 or > (28, 29, 30, 31) |
	| FALSE | 0x8004 | STATUS_8004_WEEKDAY_MISMATCH | `in.weekday` != expected weekday |
	| FALSE | 0x8005 | STATUS_8005_HOUR_OUT_OF_RANGE | `in.hour`> 23 |
	| FALSE | 0x8006 | STATUS_8006_MINUTE_OUT_OF_RANGE | `in.minute`> 59 |
	| FALSE | 0x8007 | STATUS_8007_SECOND_OUT_OF_RANGE | `in.second` > 59 |
	| FALSE | 0x8008 | STATUS_8008_NANOSECOND_OUT_OF_RANGE | `in.nanosecond` > 999_999_999 |
	
	#
	_Use [Markdown Live Preview](https://markdownlivepreview.com/) to watch this doc._
	--*)
	
	
	// Check datetime is ok
	#status := "_checkDatetime"(in := #in, checkWeekday := false);
	
	IF #status <> #STATUS_0000_DONE THEN
	  #out.seconds := 0;
	  #out.nanoseconds := 0;
	  #_datetimeToUnixTimestamp := #status;
	  ENO := false;
	  RETURN;
	END_IF;
	
	// Init days
	#days := 0;
	
	// Add year days
	IF #in.YEAR > #BASE_YEAR THEN
	  FOR #i := UINT_TO_DINT(#BASE_YEAR) TO UINT_TO_DINT(#in.YEAR) - 1 DO
	    
	    IF "_isLeapYear"(DINT_TO_UINT(#i)) THEN
	      #days += 366;
	    ELSE
	      #days += 365;
	    END_IF;
	  END_FOR;
	END_IF;
	
	// Add month days
	IF #in.MONTH > 1 THEN
	  FOR #i := 1 TO USINT_TO_DINT(#in.MONTH) - 1 DO
	    #days += "_getMonthDays"(year:=#in.YEAR, month:=DINT_TO_USINT(#i));
	  END_FOR;
	END_IF;
	
	// Add single days
	#days += #in.DAY - 1;
	
	// Convert to unix timestamp
	// Add days
	#seconds := #days * #DAYS_SECONDS;
	#seconds += #in.HOUR * #HOUR_SECONDS;
	#seconds += #in.MINUTE * #MINUTE_SECONDS;
	#seconds += #in.SECOND;
	
	// Return
	#out.seconds := #seconds;
	#out.nanoseconds := #in.NANOSECOND;
	#_datetimeToUnixTimestamp := #STATUS_0000_DONE;
	ENO := true;
	
END_FUNCTION

