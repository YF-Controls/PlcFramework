FUNCTION "_addToDatetime" : Int
TITLE = Function:Add to datetime
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : cyanezf
FAMILY : Datetime
NAME : _addToDatetime
VERSION : 1.0
   VAR_INPUT 
      in {InstructionName := 'DTL'; LibVersion := '1.0'} : DTL;   // Datetime in
      add : Variant;   // Value to be added (unnormalizedDeltatime or deltatime), usint, uint, udint, as seconds, REAL and time format
   END_VAR

   VAR_OUTPUT 
      out {InstructionName := 'DTL'; LibVersion := '1.0'} : DTL;   // Computed datetime
   END_VAR

   VAR_TEMP 
      addTo : Struct
         _usint : USInt;
         _uint : UInt;
         _udint : UDInt;
         _real : Real;
         _time : Time;
      END_STRUCT;
      unnormalized : "unnormalizedDeltatime";
      delta : "deltatime";
      deltaTimestamp : "unixTimestamp";
      inTimestamp : "unixTimestamp";
      outTimestamp : "unixTimestamp";
      status : Int;
   END_VAR

   VAR CONSTANT 
      DAY_SECONDS : ULInt := 86400;
      SECOND_NANOSECONDS : UDInt := 1_000_000_000;
      MAX_SECONDS : ULInt;
      STATUS_0000_DONE : Int := 0;
      STATUS_8020_ADD_DATA_TYPE_MOVE_ERROR : Int := 16#8020;
      STATUS_8021_ADD_DATA_TYPE_UNEXPECTED : Int := 16#8021;
      STATUS_8022_ADD_DATA_UNDERFLOW : Int := 16#8022;
   END_VAR


BEGIN
	(*--
	
	# Log
	| version | date | author | description |
	|:-------:|:----:|:------:|:------------|
	| v1.0 | 2025-06-25 | cyanezf | First version |
	
	# Dependencies
	| Dependency |
	|:-----------|
	| MOVE_BLK_VARIANT |
	| _normalizeDeltatime |
	| _datetimeToUnixTimestamp |
	| _unixTimestampToDatetime |
	| unnormalizedDeltatime |
	| deltatime |
	| unixTimestamp |
	
	# Description
	This function adds a `deltatime` to in `datetime`and returns `status` and `out` as datetime.
	
	## Add input types
	| type | units |
	|:-----|:------|
	| deltatime | Delta time format |
	| unnormalizedDeltatime | Unnormalized delta time format |
	| time | time format |
	| real | seconds.nanoscons |
	| usint | seconds |
	| uint | seconds |
	| udint | seconds |
	
	## Return
	| RLO | int | constant | description |
	|:---:|:---:|:---------|:------------|
	| TRUE | 0x0000 | STATUS_0000_OK | Datetime is ok |
	| FALSE | 0x8000 | STATUS_8000_DATETIME_UNDERFLOW | `in` < DTL#1970-01-01-00:00:00.0 |
	| FALSE | 0x8001 | STATUS_8001_DATETIME_OVERFLOW |  `in` > DTL#2262-04-11-23:47:16.854775807 |
	| FALSE | 0x8002 | STATUS_8002_MONTH_OUT_OF_RANGE | `in.month` < 1 or > 12 |
	| FALSE | 0x8003 | STATUS_8003_DAY_OUT_OF_RANGE | `in.day` < 1 or > (28, 29, 30, 31) |
	| FALSE | 0x8004 | STATUS_8004_WEEKDAY_MISMATCH | `in.weekday` != expected weekday |
	| FALSE | 0x8005 | STATUS_8005_HOUR_OUT_OF_RANGE | `in.hour`> 23 |
	| FALSE | 0x8006 | STATUS_8006_MINUTE_OUT_OF_RANGE | `in.minute`> 59 |
	| FALSE | 0x8007 | STATUS_8007_SECOND_OUT_OF_RANGE | `in.second` > 59 |
	| FALSE | 0x8008 | STATUS_8008_NANOSECOND_OUT_OF_RANGE | `in.nanosecond` > 999_999_999 |
	| FALSE | 0x8011 | STATUS_8011_DELTATIME_OVERFLOW | `add` input overflow |
	| FALSE | 0x8020 | STATUS_8020_ADD_DATA_TYPE_MOVE_ERROR | `add` input variant error |
	| FALSE | 0x8021 | STATUS_8021_ADD_DATA_TYPE_UNEXPECTED | `add` input unexpected type |
	| FALSE | 0x8022 | STATUS_8022_ADD_DATA_TYPE_UNDERFLOW  | `add` input underflow |
	
	
	#
	_Use [Markdown Live Preview](https://markdownlivepreview.com/) to watch this doc._
	--*)
	
	// Init unnormalized
	#unnormalized.weeks :=
	#unnormalized.days :=
	#unnormalized.hours :=
	#unnormalized.minutes :=
	#unnormalized.seconds :=
	#unnormalized.nanoseconds := 0;
	
	REGION Decode add input
	  IF TypeOf(#add) = deltatime THEN
	    
	    #status := MOVE_BLK_VARIANT(SRC := #add, COUNT := 1, SRC_INDEX := 0, DEST_INDEX := 0, DEST => #delta);
	    
	  ELSIF TypeOf(#add) = unnormalizedDeltatime THEN
	    
	    #status := MOVE_BLK_VARIANT(SRC := #add, COUNT := 1, SRC_INDEX := 0, DEST_INDEX := 0, DEST => #unnormalized);
	    
	    IF #status = #STATUS_0000_DONE THEN
	      #status := "_normalizeDeltatime"(in := #unnormalized, out => #delta);
	    END_IF;
	    
	  ELSIF TypeOf(#add) = USInt THEN
	    
	    #status := MOVE_BLK_VARIANT(SRC := #add, COUNT := 1, SRC_INDEX := 0, DEST_INDEX := 0, DEST => #addTo._usint);
	    
	    IF #status = #STATUS_0000_DONE THEN
	      #unnormalized.seconds := #addTo._usint;
	      #status := "_normalizeDeltatime"(in := #unnormalized, out => #delta);
	    END_IF;
	    
	  ELSIF TypeOf(#add) = UInt THEN
	    
	    #status := MOVE_BLK_VARIANT(SRC := #add, COUNT := 1, SRC_INDEX := 0, DEST_INDEX := 0, DEST => #addTo._uint);
	    
	    IF #status = #STATUS_0000_DONE THEN
	      #unnormalized.seconds := #addTo._uint;
	      #status := "_normalizeDeltatime"(in := #unnormalized, out => #delta);
	    END_IF;
	    
	  ELSIF TypeOf(#add) = UDInt THEN
	    
	    #status := MOVE_BLK_VARIANT(SRC := #add, COUNT := 1, SRC_INDEX := 0, DEST_INDEX := 0, DEST => #addTo._udint);
	    
	    IF #status = #STATUS_0000_DONE THEN
	      #unnormalized.seconds := #addTo._udint;
	      #status := "_normalizeDeltatime"(in := #unnormalized, out => #delta);
	    END_IF;
	    
	  ELSIF TypeOf(#add) = Real THEN
	    
	    #status := MOVE_BLK_VARIANT(SRC := #add, COUNT := 1, SRC_INDEX := 0, DEST_INDEX := 0, DEST => #addTo._real);
	    
	    IF #status = #STATUS_0000_DONE THEN
	      
	      IF #addTo._real < 0.0 THEN
	        #status := #STATUS_8022_ADD_DATA_UNDERFLOW;
	      ELSE
	        
	        #unnormalized.seconds := REAL_TO_UDINT(TRUNC_REAL(#addTo._real));
	        #unnormalized.nanoseconds := REAL_TO_UDINT((#addTo._real - TRUNC_REAL(#addTo._real)) * 1000000000.0);
	        #status := "_normalizeDeltatime"(in := #unnormalized, out => #delta);
	      END_IF;
	    END_IF;
	    
	  ELSIF TypeOf(#add) = Time THEN
	    
	    #status := MOVE_BLK_VARIANT(SRC := #add, COUNT := 1, SRC_INDEX := 0, DEST_INDEX := 0, DEST => #addTo._time);
	    
	    IF #status = #STATUS_0000_DONE THEN
	      
	      IF #addTo._time < t#0s THEN
	        #status := #STATUS_8022_ADD_DATA_UNDERFLOW;
	      ELSE
	        #unnormalized.seconds := DINT_TO_UDINT(#addTo._time) / 1000;
	        #unnormalized.nanoseconds := (DINT_TO_UDINT(#addTo._time) - (#unnormalized.seconds * 1000)) * 1000000;
	        #status := "_normalizeDeltatime"(in := #unnormalized, out => #delta);
	      END_IF;
	    END_IF;
	    
	  ELSE // Error
	    #status := #STATUS_8021_ADD_DATA_TYPE_UNEXPECTED;
	    
	  END_IF;
	  
	  // Return if error
	  IF #status <> #STATUS_0000_DONE THEN
	    #_addToDatetime := #status;
	    ENO := false;
	    RETURN;
	  END_IF;
	END_REGION
	
	// Get delta timestamp
	#deltaTimestamp.seconds := (UDINT_TO_ULINT(#delta.days) * #DAY_SECONDS) + UDINT_TO_ULINT(#delta.seconds);
	#deltaTimestamp.nanoseconds := #delta.nanoseconds;
	
	// Convert datetime to timestamp
	#status := "_datetimeToUnixTimestamp"(in := #in, out => #inTimestamp);
	
	IF #status <> #STATUS_0000_DONE THEN
	  #_addToDatetime := #status;
	  ENO := false;
	  RETURN;
	END_IF;
	
	// Add deltatime to timestamp 
	#outTimestamp.seconds :=  (UDINT_TO_ULINT(#inTimestamp.nanoseconds) + UDINT_TO_ULINT(#deltaTimestamp.nanoseconds)) / #SECOND_NANOSECONDS;
	#outTimestamp.nanoseconds :=  #inTimestamp.nanoseconds + #deltaTimestamp.nanoseconds - ULINT_TO_UDINT(#outTimestamp.seconds * #SECOND_NANOSECONDS);
	#outTimestamp.seconds += #inTimestamp.seconds + #deltaTimestamp.seconds;
	
	#status := "_unixTimestampToDatetime"(in := #outTimestamp, out => #out);
	
	// Return
	#_addToDatetime := #status;
	ENO := #status <> #STATUS_0000_DONE;
	
END_FUNCTION

