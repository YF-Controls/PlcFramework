FUNCTION "_compareDatetime" : Int
TITLE = Function:Compare datetime
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : cyanezf
FAMILY : 'Datetime/Util'
NAME : _compareDatetime
VERSION : 1.0
   VAR_INPUT 
      a {InstructionName := 'DTL'; LibVersion := '1.0'} : DTL;   // Datetime A
      b {InstructionName := 'DTL'; LibVersion := '1.0'} : DTL;   // Datetime B
      depthUpTo : USInt;   // 0=Nanos; 1=Seconds; 2=Minutes; 3=Hours; 4=Days; 5=Months; 6=Years (Other values means years)
   END_VAR

   VAR CONSTANT 
      A_LESS_THAN_B : Int := -1;
      A_EQUAL_TO_B : Int := 0;
      A_GREATER_THAN_B : Int := 1;
      DEPTH_UP_TO_0_ALL : USInt := 0;
      DEPTH_UP_TO_1_SECONDS : USInt := 1;
      DEPTH_UP_TO_2_MINUTES : USInt := 2;
      DEPTH_UP_TO_3_HOURS : USInt := 3;
      DEPTH_UP_TO_4_DAYS : USInt := 4;
      DEPTH_UP_TO_5_MONTHS : USInt := 5;
      DEPTH_UP_TO_6_YEARS : USInt := 6;
   END_VAR


BEGIN
	(*--
	
	# Log
	| version | date | author | description |
	|:-------:|:----:|:------:|:------------|
	| v1.0 | 2025-06-17 | cyanezf | First version |
	
	# Dependencies
	| Dependency |
	|:-----------|
	
	# Description
	This function compares datetime `a` with datetime `b` and returns if `a > b`, `a == b` and `a < b`.
	<br>
	This function can adjust the comparison depth from years to nanoseconds
	
	## Depth to up
	| usint | constant | description |
	|:-----:|:---------|:------------|
	| 0 | DEPTH_UP_TO_0_ALL | Comparison depth up to nanoseconds (all) |
	| 1 | DEPTH_UP_TO_1_SECONDS | Comparison depth up to seconds |
	| 2 | DEPTH_UP_TO_2_MINUTES | Comparison depth up to minutes |
	| 3 | DEPTH_UP_TO_3_HOURS | Comparison depth up to hours |
	| 4 | DEPTH_UP_TO_4_DAYS | Comparison depth up to days |
	| 5 | DEPTH_UP_TO_5_MONTHS | Comparison depth up to months |
	| 6 | DEPTH_UP_TO_6_YEARS | Comparison depth up to years |
	
	## Return
	| int | constant | description |
	|:---:|:---------|:------------|
	| -1 | A_LESS_THAN_B | datetime `a` is less than `b` |
	| 0 | A_EQUAL_TO_B | datetime `a` is equal to `b` |
	| 1 | A_GREATER_THAN_B | datetime `a` is greater than `b` |
	
	
	#
	_Use [Markdown Live Preview](https://markdownlivepreview.com/) to watch this doc._
	--*)
	
	// Compare year
	IF #a.YEAR < #b.YEAR THEN
	  #_compareDatetime := #A_LESS_THAN_B;
	  ENO := TRUE;
	  RETURN;
	  
	ELSIF #a.YEAR > #b.YEAR THEN
	  #_compareDatetime := #A_GREATER_THAN_B;
	  ENO := TRUE;
	  RETURN;
	END_IF;
	
	IF #depthUpTo >= #DEPTH_UP_TO_6_YEARS THEN
	  #_compareDatetime := #A_EQUAL_TO_B;
	  ENO := true;
	  RETURN;
	END_IF;
	
	// Compare month
	IF #a.MONTH < #b.MONTH THEN
	  #_compareDatetime := #A_LESS_THAN_B;
	  ENO := true;
	  RETURN;
	  
	ELSIF #a.MONTH > #b.MONTH THEN
	  #_compareDatetime := #A_GREATER_THAN_B;
	  ENO := true;
	  RETURN;
	END_IF;
	
	IF #depthUpTo >= #DEPTH_UP_TO_5_MONTHS THEN
	  #_compareDatetime := #A_EQUAL_TO_B;
	  ENO := true;
	  RETURN;
	END_IF;
	
	// Compare day
	IF #a.DAY < #b.DAY THEN
	  #_compareDatetime := #A_LESS_THAN_B;
	  ENO := true;
	  RETURN;
	  
	ELSIF #a.DAY > #b.DAY THEN
	  #_compareDatetime := #A_GREATER_THAN_B;
	  ENO := true;
	  RETURN;
	END_IF;
	
	IF #depthUpTo >= #DEPTH_UP_TO_4_DAYS THEN
	  #_compareDatetime := #A_EQUAL_TO_B;
	  ENO := true;
	  RETURN;
	END_IF;
	
	// Compare hour
	IF #a.HOUR < #b.HOUR THEN
	  #_compareDatetime := #A_LESS_THAN_B;
	  ENO := true;
	  RETURN;
	  
	ELSIF #a.HOUR > #b.HOUR THEN
	  #_compareDatetime := #A_GREATER_THAN_B;
	  ENO := true;
	  RETURN;
	END_IF;
	
	IF #depthUpTo >= #DEPTH_UP_TO_3_HOURS THEN
	  #_compareDatetime := #A_EQUAL_TO_B;
	  ENO := true;
	  RETURN;
	END_IF;
	
	// Compare minute
	IF #a.MINUTE < #b.MINUTE THEN
	  #_compareDatetime := #A_LESS_THAN_B;
	  ENO := true;
	  RETURN;
	  
	ELSIF #a.MINUTE > #b.MINUTE THEN
	  #_compareDatetime := #A_GREATER_THAN_B;
	  ENO := true;
	  RETURN;
	END_IF;
	
	IF #depthUpTo >= #DEPTH_UP_TO_2_MINUTES THEN
	  #_compareDatetime := #A_EQUAL_TO_B;
	  ENO := true;
	  RETURN;
	END_IF;
	
	// Compare second
	IF #a.SECOND < #b.SECOND THEN
	  #_compareDatetime := #A_LESS_THAN_B;
	  ENO := true;
	  RETURN;
	  
	ELSIF #a.SECOND > #b.SECOND THEN
	  #_compareDatetime := #A_GREATER_THAN_B;
	  ENO := true;
	  RETURN;
	END_IF;
	
	IF #depthUpTo >= #DEPTH_UP_TO_1_SECONDS THEN
	  #_compareDatetime := #A_EQUAL_TO_B;
	  ENO := true;
	  RETURN;
	END_IF;
	
	// Compare nanosecond
	IF #a.NANOSECOND < #b.NANOSECOND THEN
	  #_compareDatetime := #A_LESS_THAN_B;
	  ENO := true;
	  RETURN;
	  
	ELSIF #a.NANOSECOND > #b.NANOSECOND THEN
	  #_compareDatetime := #A_GREATER_THAN_B;
	  ENO := true;
	  RETURN;
	END_IF;
	
	#_compareDatetime := #A_EQUAL_TO_B;
	ENO := true;
	RETURN;
	
END_FUNCTION

