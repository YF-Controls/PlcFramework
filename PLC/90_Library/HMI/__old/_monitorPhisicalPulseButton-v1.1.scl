FUNCTION_BLOCK "_monitorPhysicalPulseButton"
TITLE = Function:Monitor pulse button
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : cyanezf
FAMILY : HMI
NAME : _monitorPhysicalPulseButton
VERSION : 1.1

   VAR_INPUT 
      button { ExternalWritable := 'False'} : Bool;   // IR: 1=Button is pressed
   END_VAR
   VAR_INPUT RETAIN
      WATCHDOG_TIME { ExternalWritable := 'False'} : Time := t#10s;   // IR: 0=Disable watch dog; >0=Enable and monitor watchdog
      ACKN_TIME { ExternalWritable := 'False'} : Time := T#500ms;   // IR: >0=Ackn pulse time
   END_VAR

   VAR_OUTPUT 
      Q { ExternalWritable := 'False'} : Bool;   // OR: 1=FP Pulse
      a2w_1_watchdog { ExternalWritable := 'False'} : Bool;   // OR: 1=Alarm warning - Watchdog
   END_VAR

   VAR 
      virtualButton : Bool;   // SW: 1=Virtual button is pressed
      private { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct   // SX: Private static variables
         button { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         acknTimer {InstructionName := 'TP_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TP_TIME;
         watchdogTimer {InstructionName := 'TON_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TON_TIME;
      END_STRUCT;
   END_VAR

   VAR_TEMP 
      pulseOn : Bool;
   END_VAR


BEGIN
(*--

# Log
| version | date | author | description |
|:-------:|:----:|:------:|:------------|
| v1.1 | 2024-01-13 | cyanezf | Bugs fixed |
| v1.0 | 2023-09-27 | cyanezf | First version |

# Dependencies
| Dependency |
|:-----------|
| TP_TIME |
| TON_TIME |

# Description
This function monitors any pulse `button` and
return a processed pulse when positive edge of
button was evaluted.

#
_Use [Markdown Live Preview](https://markdownlivepreview.com/) to watch this doc._
--*)
	
	// Positive edge from button
	#pulseOn := (#button AND NOT #private.button) OR #virtualButton;
	#private.button := #button;
	#virtualButton := false;
	
	// Ackn pulse when negative edge is detected and not alarm present
	#private.acknTimer(IN := #pulseOn,
	                   PT := t#500ms,
	                   Q => #Q);
	
	// Watchdog monitoring
	#private.watchdogTimer(IN := #button AND #WATCHDOG_TIME > t#0s,
	                       PT := #WATCHDOG_TIME,
	                       Q => #a2w_1_watchdog);
	
	// Save RLO
	ENO := true;
	
END_FUNCTION_BLOCK

