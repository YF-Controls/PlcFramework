FUNCTION_BLOCK "_collectorConveyorFilling"
TITLE = Function:Collector Conveyor Filling
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : cyanezf
FAMILY : 'Control/ConveyorTechnology'
NAME : _collectorConveyorFilling
VERSION : 1.0
   VAR_INPUT 
      pickingUp { ExternalWritable := 'False'} : Bool;   // IR: 1=Collector is picking up object
      transferring { ExternalWritable := 'False'} : Bool;   // IR: 1=Collector is transferring object
      isRunning { ExternalWritable := 'False'} : Bool;   // IR: 1=Collector is running
      sensorStop { ExternalWritable := 'False'} : Bool;   // IR: 1=Stop sensor occupied
      sensorFull { ExternalWritable := 'False'} : Bool;   // IR: 1=Full sensor occupied
      clear : Bool;   // IW: 1=Clear objects pulse
      set : Bool;   // IW: 1=Set objects pulse
      opt_autoClear { ExternalWritable := 'False'} : Bool := 1;   // IR: Option - 1=Auto clear filling
      opt_autoFillOne { ExternalWritable := 'False'} : Bool := 1;   // IR: Option - 1=Auto fill with one object
      MAX_OBJECT_LENGTH { ExternalWritable := 'False'} : Real := 800.0;   // IR: Object length in mm
      MAX_CONVEYOR_LENGTH { ExternalWritable := 'False'} : Real := 5000.0;   // IR: Conveyor length in mm
      CONVEYOR_SPEED { ExternalWritable := 'False'} : Real := 0.5;   // IR: Conveyor speed in mm/s
      MAX_OBJECTS { ExternalWritable := 'False'} : UInt := 10;   // IR: Max objects in conveyor
   END_VAR

   VAR_OUTPUT 
      objects { ExternalWritable := 'False'} : UInt;   // OR: Current filling level
      percentage { ExternalWritable := 'False'} : USInt;   // OR: Current filling level in percentage
      isEmpty { ExternalWritable := 'False'} : Bool;   // OR: 1=Collector is empty
      isFull { ExternalWritable := 'False'} : Bool;   // OR: 1=Collector is full
      overflow { ExternalWritable := 'False'} : Bool;   // OR: 1=Collector overflow
   END_VAR

   VAR_IN_OUT 
      setObjects : UInt;   // IOW: Set objects value
   END_VAR

   VAR RETAIN
      currentObjects { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UInt;   // SX: Current objects
   END_VAR
   VAR 
      private { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct   // SX: Static private variables
         pickingUp { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         transferring { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         isRunning { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         sensorStop { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         sensorFull { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         clear { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         set { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         autoClearTon {InstructionName := 'TONR_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TONR_TIME;
         autoFillOneTon {InstructionName := 'TON_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TON_TIME;
      END_STRUCT;
   END_VAR

   VAR_TEMP 
      tmpTime : Real;
      conveyorTime : Time;
      objectTime : Time;
      objectTransitTime : Time;
      check : Bool;
   END_VAR


BEGIN
	(*--
	
	# Log
	| version | date | author | description |
	|:-------:|:----:|:------:|:------------|
	| v1.0 | 2025-07-07 | cyanezf | First version |
	
	# Dependencies
	| Dependency |
	|:-----------|
	| TON_TIME |
	| TONR_TIME |
	  
	# Description
	This function updates the filling level of conveyor (`objects`).
	
	## Conveyor paramters
	
	* `MAX_CONVEYOR-LENGTH`in mm
	* `CONVEYOR_SPEED` in mm/s
	* `MAX_OBJECT_LENGTH`in mm
	* `OBJECT_TRANSIT_LENGTH`in mm
	* `MAX_OBJECTS`
	
	```
	  <--- Forward direction
	
	  |<----------------------------->| MAX_CONVEYOR_LENGTH
	->|   |<--                          MAX_OBJECT_LENGTH
	  | 1 | 2 | 3 | 4 | 5 | 6 | . | n | MAX_OBJECTS
	  | s |                       | f | s= Stop sensor, f= Full sensor
	<<|                               | transferring
	  |                               |<< pickingUp
	                          ->|     |<- OBJECT_TRANSITION_LENGTH
	```
	
	## Options
	### Option auto clear
	It clears `objects` When this input is true, `sensorStop`, `sensorFull` are free and `objects` is more than zero.
	
	### Option auto fill one
	It sets `objects` to one when this input is true, `sensorStop is occupied and `objects`is zero.
	
	#
	_Use [Markdown Live Preview](https://markdownlivepreview.com/) to watch this doc._
	--*)
	
	REGION Increase/Decrease
	  
	  IF #pickingUp AND NOT #private.pickingUp THEN
	    #currentObjects += 1;
	  END_IF;
	  #private.pickingUp := #pickingUp;
	  
	  IF #transferring AND NOT #private.transferring THEN
	    IF #currentObjects > 0 THEN
	      #currentObjects -= 1;
	    END_IF;
	  END_IF;
	  #private.transferring := #transferring;
	  
	END_REGION
	
	REGION Commands
	  // Clear
	  IF #clear AND NOT #private.clear THEN
	    #currentObjects := 0;
	  END_IF;
	  #private.clear := #clear;
	  
	  // Set
	  IF #set AND NOT #private.set THEN
	    IF #setObjects < 0 THEN
	      #currentObjects := 0;
	    ELSIF #setObjects > #MAX_OBJECTS THEN
	      #currentObjects := #MAX_OBJECTS;
	    ELSE
	      #currentObjects := #setObjects;
	    END_IF;
	    #setObjects := 0;
	  END_IF;
	  #private.set := #set;
	  
	END_REGION
	
	REGION Options
	  
	  // Auto clear
	  #tmpTime := #MAX_CONVEYOR_LENGTH / #CONVEYOR_SPEED;
	  #conveyorTime := REAL_TO_DINT(#tmpTime * 1000.0);
	  
	  #check := NOT #sensorStop AND #currentObjects > 0 AND #opt_autoClear;
	  #private.autoClearTon(IN := #check AND #isRunning,
	                        R := NOT #check,
	                        PT := #conveyorTime);
	  
	  IF #private.autoClearTon.Q THEN
	    #currentObjects := 0;
	  END_IF;
	  
	  // Auto fill one
	  #tmpTime := #MAX_OBJECT_LENGTH / #CONVEYOR_SPEED;
	  #objectTime := REAL_TO_DINT(#tmpTime * 1000.0);
	  
	  #check := NOT #transferring AND #sensorStop AND #currentObjects <= 0 AND #opt_autoFillOne;
	  #private.autoFillOneTon(IN := #check,
	                          PT := #objectTime);
	  
	  IF #private.autoFillOneTon.Q THEN
	    #currentObjects := 1;
	  END_IF;
	
	  
	END_REGION
	
	REGION Output status
	  
	  #objects := #currentObjects;
	  #percentage := REAL_TO_USINT(UINT_TO_REAL(#currentObjects) / UINT_TO_REAL(#MAX_OBJECTS) * 100.0);
	  #isEmpty := #currentObjects <= 0;
	  #isFull := #currentObjects >= #MAX_OBJECTS;
	  #overflow := #currentObjects > #MAX_OBJECTS;
	  
	END_REGION
	
	// Save RLO
	ENO := true;
	
END_FUNCTION_BLOCK

