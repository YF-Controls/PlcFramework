FUNCTION_BLOCK "_cycleClock"
TITLE = Function:Cycle clock
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : cyanezf
FAMILY : 'Control/Util'
NAME : _cycleClock
VERSION : 1.0
   VAR_INPUT 
      releasing { ExternalWritable := 'False'} : Bool;   // IR: 1=Object is been released
      cycleTime { ExternalWritable := 'False'} : Time := T#30s;   // IR: Cycle time to enable release
      preCycleTime { ExternalWritable := 'False'} : Time := T#20s;   // IR: Pre cycle time to prepare release, must be less or equal than cycleTime
   END_VAR

   VAR_OUTPUT 
      release { ExternalWritable := 'False'} : Bool;   // OR: Cycle time reached, release object
      preRelease { ExternalWritable := 'False'} : Bool;   // OR: cycle time is close to be reached (over precycleTime)
      ET { ExternalWritable := 'False'} : Time;   // OR: Elapsed time
      RT { ExternalWritable := 'False'} : Time;   // OR: Remaining time
   END_VAR

   VAR 
      private { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct   // SX: Private static variables
         releasingFp { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         release { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool := 1;
         cycleTimer {InstructionName := 'TON_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TON_TIME;
      END_STRUCT;
   END_VAR

   VAR_TEMP 
      releasingPulse : Bool;
   END_VAR


BEGIN
(*--

# Log
| version | date | author | description |
|:-------:|:----:|:------:|:------------|
| v1.0 | 2025-06-16 | cyanezf | First version |

# Dependencies
| Dependency |
|:-----------|
| TON_TIME |
	
# Description
This function generates a cycle clock to handle material flow with a fixed cycle time.

#
_Use [Markdown Live Preview](https://markdownlivepreview.com/) to watch this doc._
--*)
	
	// Releasing pulse
	IF #releasing AND NOT #private.releasingFp THEN
	  #private.release := false;
	END_IF;
	#private.releasingFp := #releasing;
	
	// Update timer
	#private.cycleTimer(IN:=NOT #private.release,
	                    PT:=#cycleTime,
	                    ET=>#ET);
	
	// Release
	IF #private.cycleTimer.Q THEN
	  #private.release := true;
	END_IF;
	
	// Return
	#release := #private.release;
	#preRelease := #ET >= #preCycleTime OR #release;
	#RT := #cycleTime - #ET;
	
	// Save RLO
	ENO := true;
	
END_FUNCTION_BLOCK

