FUNCTION_BLOCK "_measureCycleTime"
TITLE = Function:Measure Cycle TIme
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : cyanezf
FAMILY : 'Control/Util'
NAME : _measureCycleTime
VERSION : 1.0
   VAR_INPUT 
      start { ExternalWritable := 'False'} : Bool;   // IR: 1=Start measuring
      stop { ExternalWritable := 'False'} : Bool;   // IR: 1=Stop measuring and rotate log
      clear : Bool;   // IW: FP=Clear statistics
      MAX_TIME { ExternalWritable := 'False'} : Time := T#30s;   // IR: Max allowed time
   END_VAR

   VAR_OUTPUT RETAIN
      cycles { ExternalWritable := 'False'} : UDInt;   // OR: Current cycles
      currentTime { ExternalWritable := 'False'} : Time;   // OR: Current time
      shortestTime { ExternalWritable := 'False'} : Time;   // OR: Shortest time (updated when stop)
      longtestTime { ExternalWritable := 'False'} : Time;   // OR: Longtest time (updated when stop)
   END_VAR

   VAR RETAIN
      run { ExternalWritable := 'False'} : Bool;   // SR: 1=Run
      log { ExternalWritable := 'False'} : Array[#MIN_LOG..#MAX_LOG] of Time;   // SR: Log
   END_VAR
   VAR 
      private { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct   // SX: Private statics variables
         cycleTimer {InstructionName := 'TON_TIME'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : TON_TIME;
         start { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         stop { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         clear { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      END_STRUCT;
   END_VAR

   VAR_TEMP 
      startPulse : Bool;
      stopPulse : Bool;
      clearPulse : Bool;
      overflow : Bool;
      i : Int;
   END_VAR

   VAR CONSTANT 
      MIN_LOG : Int := 0;
      MAX_LOG : Int := 19;
   END_VAR


BEGIN
	(*--
	
	# Log
	| version | date | author | description |
	|:-------:|:----:|:------:|:------------|
	| v1.0 | 2025-03-19 | cyanezf | First version |
	
	# Dependencies
	| Dependency |
	|:-----------|
	| TON_TIME |
	
	# Description
	This function measures the cycle time and log it.
	
	#
	_Use [Markdown Live Preview](https://markdownlivepreview.com/) to watch this doc._
	--*)
	
	// Get pulses
	#startPulse := #start AND NOT #private.start;
	#private.start := #start;
	
	#stopPulse := #stop AND NOT #private.stop;
	#private.stop := #stop;
	
	#clearPulse := #clear AND NOT #private.clear;
	#private.clear := #clear;
	
	// Start event
	IF #startPulse THEN
	  #run := 1;
	END_IF;
	
	// Cycle timer
	#private.cycleTimer(IN:=#run,
	                    PT:=#MAX_TIME,
	                    Q=>#overflow,
	                    ET=>#currentTime);
	
	// Stop events
	IF #run AND (#stopPulse OR #overflow) THEN
	  #run := 0; // Clar run
	  #cycles += 1; // Update cycles
	  
	  // Rotate log
	  FOR #i := #MAX_LOG - 1 TO #MIN_LOG BY -1 DO
	    #log[#i + 1] := #log[#i]; 
	  END_FOR;
	  
	  #log[0] := #currentTime; // Update log[0]
	  #shortestTime := #MAX_TIME; // Init. shortest
	  #longtestTime := t#0s; // Init. longtest
	  
	  // Update shortest and longtest
	  FOR #i := #MIN_LOG TO #MAX_LOG DO
	    
	    IF #log[#i] < #shortestTime AND #log[#i] > t#0s THEN
	      #shortestTime := #log[#i];
	    END_IF;
	    
	    IF #log[#i] > #longtestTime AND  #log[#i] < #MAX_TIME THEN
	      #longtestTime := #log[#i];
	    END_IF;
	    
	  END_FOR;
	  
	END_IF;
	
	// Clear event
	IF #clearPulse THEN
	  #run := 0;
	  #cycles := 0;
	  #currentTime :=
	  #shortestTime :=
	  #longtestTime := t#0s;
	  
	  FOR #i := #MIN_LOG TO #MAX_LOG DO
	    #log[#i] := t#0s;
	  END_FOR;
	  
	END_IF;
	
	// Save RLO
	ENO := true;
	
	
END_FUNCTION_BLOCK

