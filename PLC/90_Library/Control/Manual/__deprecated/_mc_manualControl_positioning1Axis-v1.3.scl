FUNCTION "_mc_manualControl_positioning1Axis" : Void
TITLE = Function:Manual Control for Positioning Axis
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : cyanezf
FAMILY : Control/Manual
NAME : _mc_manualControl_positioning1Axis
VERSION : 1.3

   VAR_INPUT 
      manualOk : Bool;   // 1=Manual ok
      homed : Bool;   // 1=Homed and sync. ok
      controller_actualPosition : Real;   // Controller: Axis actual position
      controller_actualCommand : Int;   // Controller: Actual command
      MIN_POSITION : Real;   // Settings: Min. position
      MAX_POSITION : Real;   // Settings: Max. position
      POSITION_TOLERANCE : Real;   // Settings: Position tolerance
      MAX_MOVEMENT_TIME : Time;   // Watchdog time to cancel movements
   END_VAR

   VAR_IN_OUT 
      hmiCommand : UInt;   // HMI command
      manual : "mc_manual_positioning1Axis";   // Manual structure
      controller_command : Int;   // Controller: set command
      aux_manualMovementTon {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;   // Aux timer
      aux_fp0 : Bool;   // Aux flag
      aux_fp1 : Bool;   // Aux flag
      aux_fp2 : Bool;   // Aux flag
   END_VAR

   VAR CONSTANT 
      AXIS_0V : UInt := 0;
      AXIS_1L : UInt := 1;
      AXIS_2R : UInt := 2;
      MC_CMD_0_NIL : Int := 0;
      MC_CMD_1_STOP : Int := 1;
      MC_CMD_4_JOG_FWD : Int := 4;
      MC_CMD_5_JOG_BWD : Int := 5;
      MC_CMD_8_ABSOLUTE_POS : Int := 8;
      HMI_CMD_0000_NIL : UInt := 0;
      HMI_CMD_0034_MANUAL_FWD : UInt := 34;
      HMI_CMD_0035_MANUAL_BWD : UInt := 35;
      HMI_CMD_0042_ABSOLUTE_POSITIONING : UInt := 42;
   END_VAR


BEGIN
(*--
# Log
| version | date | author | description |
|:-------:|:----:|:------:|:------------|
| v1.3 | 2024-08-16 | cyanezf | Refactor to scl |
| v1.2 | 2024-08-15 | cyanezf | Command and actualCommand changed to int |
| v1.1 | 2023-12-13 | cyanezf | Homed name changed |
| v1.0 | 2023-12-12 | cyanezf | First version |

# Dependencies
| Dependency |
|:-----------|
| mc_manual_positioning1Axis |
| TON_TIME |
	
# Description
This function is used to move a Positioning Axis with jog forward, jog backward and absolute positioning commands.

#
_Use [Markdown Live Preview](https://markdownlivepreview.com/) to watch this doc._
--*)

	REGION Watchdog
	  // HMI command 34 sets forward movement
	  // HMI command 35 sets backward movement
	  // HMI command 42 sets positioning movement
	  
	  #aux_manualMovementTon(IN:=#hmiCommand = #HMI_CMD_0034_MANUAL_FWD OR #hmiCommand = #HMI_CMD_0035_MANUAL_BWD OR #hmiCommand = #HMI_CMD_0042_ABSOLUTE_POSITIONING,
	                         PT:=#MAX_MOVEMENT_TIME);
	  
	  IF #aux_manualMovementTon.Q THEN
	    #hmiCommand := #HMI_CMD_0000_NIL;
	  END_IF;
	  
	END_REGION
	
	REGION Forward
	  
	  #manual.forward :=
	  #manualOk AND
	  #hmiCommand = #HMI_CMD_0034_MANUAL_FWD AND
	  ((#homed AND #controller_actualPosition < #MAX_POSITION) OR NOT #homed) AND
	  (#controller_actualCommand = #MC_CMD_0_NIL OR #controller_actualCommand = #MC_CMD_4_JOG_FWD);
	  
	  IF #manual.forward THEN
	    #controller_command := #MC_CMD_4_JOG_FWD;
	  END_IF;
	  
	END_REGION
	
	REGION Backward
	  
	  #manual.backward :=
	  #manualOk AND
	  #hmiCommand = #HMI_CMD_0035_MANUAL_BWD AND
	  ((#homed AND #controller_actualPosition > #MIN_POSITION) OR NOT #homed) AND
	  (#controller_actualCommand = #MC_CMD_0_NIL OR #controller_actualCommand = #MC_CMD_5_JOG_BWD);
	  
	  IF #manual.backward THEN
	    #controller_command := #MC_CMD_5_JOG_BWD;
	  END_IF;
	  
	END_REGION
	
	REGION Positioning
	  
	  #manual.positioning :=
	  #manualOk AND
	  #hmiCommand = #HMI_CMD_0042_ABSOLUTE_POSITIONING AND
	  #homed AND
	  #controller_actualPosition >= #MIN_POSITION AND
	  #controller_actualPosition <= #MAX_POSITION AND
	  (#controller_actualCommand = #MC_CMD_0_NIL OR
	  #controller_actualCommand = #MC_CMD_1_STOP OR
	  #controller_actualCommand = #MC_CMD_8_ABSOLUTE_POS);
	  
	  IF #manual.positioning THEN
	    #controller_command := #MC_CMD_8_ABSOLUTE_POS;
	  END_IF;
	  
	END_REGION
	
	REGION Clear commands
	  
	  IF (NOT #manual.forward AND #aux_fp0) OR
	    (NOT #manual.backward AND #aux_fp1) OR
	    (NOT #manual.positioning AND #aux_fp2) THEN
	    
	    #controller_command := #MC_CMD_0_NIL;
	    #hmiCommand := #HMI_CMD_0000_NIL;
	    
	  END_IF;
	  
	  #aux_fp0 := #manual.forward;
	  #aux_fp1 := #manual.backward;
	  #aux_fp2 := #manual.positioning;
	  
	END_REGION
	
	REGION Axis in position
	  
	  "_inPosition"(homed:=#homed, actualPosition:=#controller_actualPosition, POSITION:=#manual.axis.position, TOLERANCE:=#POSITION_TOLERANCE, ENO=> ENO);
	  #manual.axis.inPosition := ENO;
	  
	END_REGION
	
	REGION Save RLO
	  
	  ENO := true;
	  
	END_REGION
	
END_FUNCTION

